"use client"

import { NavBar, NavBarLeft, NavBarRight } from '@/components/NavBar/NavBar'
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import Image from 'next/image';
import SearchBar from '@/components/SearchBar/SearchBar';
import Icon from '@/components/Icon/Icon';
import { SetStateAction, createContext, useContext, useEffect, useState } from 'react';
import ScrollArea from '@/components/ScrollArea/ScrollArea'
import { VerticalNavigation, VerticalNavigationHeader, VerticalNavigationLink } from '@/components/VerticalNavigation/VerticalNavigation'
import Separator from '@/components/Separator/Separator'
import Modal from '@/components/Modal/Modal'
import Button from '@/components/Button/Button'
import { Command, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator } from '@/components/Command/Command'
import { useRouter } from 'next/navigation';



type GlobalContextType = {
  isDarkMode: boolean
  setIsDarkMode: React.Dispatch<SetStateAction<boolean>>;
}
const GlobalContext = createContext<GlobalContextType>({
  isDarkMode: false,
  setIsDarkMode: () => { },
});
export const useGlobal = () => useContext(GlobalContext);

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children, }: { children: React.ReactNode }) {

  const [isDarkMode, setIsDarkMode] = useState(false)
  const [selected, setSelected] = useState<string>('Accordion')
  const [showSearchComponents, setShowSearchComponents] = useState<boolean>(false)

  const components = [
    'Accordion',
    'AspectRatio',
    'Backdrop',
    'Badge',
    'Breadcrumb',
    'Button',
    'Card',
    'Carousel',
    'Checkbox',
    'Combobox',
    'Command',
    'Counter',
    'DragNDrop',
    'Drawer',
    'Dropdown',
    'Expandable',
    'HoverCard',
    'Icon',
    'Input',
    'Modal',
    'MultiSelect',
    'NavBar',
    'OutsideClick',
    'Pagination',
    'Popover',
    'PrettyCode',
    'ScrollArea',
    'SearchBar',
    'Select',
    'Separator',
    'Sheet',
    'ShowMore',
    'Skeleton',
    'Slider',
    'StarRating',
    'Swipeable',
    'Switch',
    'Table',
    'Tabs',
    'TextArea',
    'Toast',
    'Tooltip',
    'VerticalNavigation'
  ];
  const router = useRouter();

  return (
    <html lang="en">
      <GlobalContext.Provider value={{ isDarkMode, setIsDarkMode }}>
        <body className={`${inter.className} ${isDarkMode ? 'darkMode' : ''}`}>

          <div className='dummy'></div>
          <div className={`page ${isDarkMode ? 'darkMode' : ''}`}>
            <NavBar darkMode={isDarkMode}>
              <NavBarLeft>
                <Image alt='' src='/Home/logo.png' width={140} height={24} />
                <a href=''><p>Examples</p></a>
                <a href=''><p>Components</p></a>
                <a href=''><p>Documentation</p></a>
              </NavBarLeft>
              <NavBarRight>
                <Button imageSrc='/Command/search.svg' style={{ boxShadow: '0 0 20px 5px rgba(204, 204, 204, 0.1), -8px 0 6px -8px rgba(32, 32, 32, 0.05)' }} darkMode={isDarkMode} variant='outline' text='Search components...' handleClick={async () => setShowSearchComponents(prev => !prev)} />
                <Modal darkMode={isDarkMode} showModal={showSearchComponents} setShowModal={setShowSearchComponents}>
                  <Command darkMode={isDarkMode}>
                    <CommandInput placeholder="Type a command or search..." />
                    <CommandList>
                      <ScrollArea darkMode={isDarkMode}>
                        <CommandGroup style={{ maxHeight: '300px' }} heading="Components">
                          {components.map((component, index) => (
                            <CommandItem
                              key={index}
                              text={component}
                            />
                          ))}
                        </CommandGroup>
                      </ScrollArea>
                    </CommandList>
                  </Command>
                </Modal>
                <Icon href='https://github.com/tonyqiu123/100-days-of-components' invert={isDarkMode} image='/Icon/githubIcon.png' />
                <Icon handleClick={() => setIsDarkMode(prevDarkMode => !prevDarkMode)} invert={isDarkMode} image={isDarkMode ? '/Home/moon.svg' : '/Home/sun.svg'} />
              </NavBarRight>
            </NavBar>

            <div style={{ display: 'flex', gap: '48px', width: '100%' }}>

              <ScrollArea darkMode={isDarkMode}>
                <VerticalNavigation selected={selected} setSelected={setSelected} darkMode={isDarkMode}>
                  <VerticalNavigationHeader text='Components' />
                  {components.map((component, index) => (
                    <VerticalNavigationLink
                      text={component}
                      key={index}
                      onClick={() => {
                        // Construct the new URL based on the component name
                        const newUrl = `/${component.toLowerCase()}`;
                        setSelected(component)
                        // Change the route programmatically
                        router.push(newUrl);
                      }}
                    />
                  ))}
                </VerticalNavigation>
              </ScrollArea>

              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', width: '100%' }}>
                {children}
              </div>

            </div>
            <Separator darkMode={isDarkMode} orientation='h' />
            <div className={`footer ${isDarkMode ? 'darkMode' : ''}`}>
              <p>Built by Tony Qiu. The source code is available on Github.</p>
            </div>
          </div>
        </body>
      </GlobalContext.Provider>
    </html>
  )
}
